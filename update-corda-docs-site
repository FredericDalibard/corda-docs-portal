<title>Update the Corda Docs Site (for Technical Writers)</title>

How to publish updates to documents that are:
* already published on the Corda Docs site
*	yet to be published (future versions)

## Prerequisites

Set up your environment first. You must have:

*	Git
*	Access to GitHub with an R3 account
*	SSH access to the githubrepo repositories
*	A text editor (such as Visual Studio or Atom)
* A Git GUI (Such as SourceTree or GitHub Desktop)
*	Access to JIRA

##Edit a published document
Edit published documents in the *corda-docs* repository.

### Create a New Branch
You will create a new ‘branch’ to make and view your changes locally before adding them to the live version of the docs site. Changes you make to your branch only exist on your computer.

1.	Open the JIRA ticket for the issue you are working on and copy the ticket number.
2.	Open your local *githubrepo* folder.
3.	Right-click the *codra-docs* folder and choose ‘New Terminal at Folder’.
4.	Run the command `git fetch` in the terminal window. This command asks Git if there have been any updates to the remote server that need to be updated on your local machine.
5.	Run the command `git pull`. This command updates your local copy of the repository with any changes that have occurred since the last time you updated your local copy.
6.	Run the command `git checkout -b <paste your ticket number here> `. Example: `git checkout -b DOC-1903` This will create a new ‘branch’ in Git – a local copy of the repository that you can work on without affecting the master copy of the files held on the remote Git server. You will be automatically switched to the new branch – any changes that you make will only appear on this branch for now.

### Make your Changes
Use markdown formatting – see the [Markdown Quickstart Guide] (https://engineering.r3.com/help/knowledge-base-style-and-markdown-guide/)

1.	Open your local copy of the corda-docs folder in your text editor.
2.	Navigate to the correct document. Use the URL from the https://docs.corda.net to find the file path (you will need to start with content > en > version).
3.	Make your changes and save.

### View your Changes in Hugo
You should check your changes in Hugo – this will let you see if your markdown formatting has worked as expected.

1.	Go to your local copy of the corda-docs repo.a
2.	Right-click the codra-docs folder and choose ‘New Terminal at Folder’.
3.	Run command `hugo serve`

Hugo will return a URL, which you can use to preview your changes.

### Commit and Push your Changes
If you are happy with the way your changes look on Hugo, send them to the remote repository to be reviewed.

1.	Return to the command line.
2.	Run command git branch to confirm you are working on the correct branch (this is the number of the ticket you are working on).
3.	Commit your changes. This saves your changes to your local repository.
  a.	Run command `git add .`
  b.	Run command `git commit -m “<DOC-1111: updated <files name(s)>  <versions>” ` Fill in the comment between the quotation marks with the information relevant to your update. This will become the title of your pull request in GitHub.
4.	Push your changes. This sends your updates to GitHub (the remote repository). The easiest way to do this is a little hacky!
  a.	Run command `git push`
  b.	Git will return an error and instruct you to push a longer string: `git push --set-upstream origin <branch name> `. Push that.

### Raise a Pull Request
Your changes are now available on the remote repository. This allows other people to compare your proposed changes to the existing ‘master’ copy and either approve them or suggest changes.

1.	Go to the *corda-docs* repo in [GitHub] (https://github.com/corda/corda-docs)
2.	Open and create the pull request (PR).
  a.	Add any comments, such as a summary of the changes you made.
  b.	Add labels: team technical writing, internal, and any other relevant labels (for example, ‘bug’ or ‘documentation’.
  c.	Add any reviewers. You may need to add developers that need to do a technical review and/or a specific member of the technical writing team. If you don’t select a specific reviewer, GitHub will default to the general technical writing team.
  d.	Select Create Pull Request
3.	Copy the URL for the PR and navigate to your Jira ticket. Add the PR to the ticket as a comment. For example, “Created PR for corda-docs repo: URL”
4.	Let the relevant people know about your pull request – many don’t receive GitHub notifications. Ping any involved developers and drop the PR in the Technical Writers team chat.

### Add Tags
Tags are used to locate your branch in case a change needs to be reverted later. These instructions refer to the SourceTree UI - if you are using a different Git GUI, adapt as needed.

1.	Go to SourceTree and open your branch.
2.	Select ‘Fetch’ from the top menu to open your fetch settings.
3.	Tick ‘Fetch and store all tags locally’ and click OK.
4.	Select ‘Pull’ from the top menu.
5.	Select your pull request.
6.	Add the tag – it should contain the year, month, date, and time. For example: publish-2020-03-23-1303.

You can confirm your tag has been added under ‘Tags’ menu on GitHub https://github.com/corda/corda-docs

### Publish your Approved Content
Your PR must be approved by any relevant engineers and at least one member of the technical writing team. Until you have received the required approval, you will be blocked from merging your request with the master copy on GitHub.

When your PR is approved, you can publish your changes to the live docs site.

1.	Go to your PR in Github. You will now have the option to merge your changes to ‘master’ – the live docs site.
2.	Merge your changes in the GitHub UI. GitHub will automatically delete your branch from the remote repository, as your changes are now part of the master branch.
3.	Delete the local copy of the branch. You cannot delete the branch while you are in it – so you may have to switch branches to delete.
  a.	Open the command line from the corda-docs directory.
  b.	Run command `git branch` to check which branch you are on. If you are on the branch you are attempting to delete, run command `git checkout -b master`
  c.	Run command `git branch -d <branch name>`

In most cases, you will also need to make your change to the documentation for the next version of Corda - follow the instructions below.  If you do not need to make changes to the future version, go to your Jira ticket and mark it done.


## Edit unpublished content
Edit documents that have not yet been published in the *corda-docs-develop* repository. This stores documentation for versions of Corda that have not been released.  The process is a little different from editing published documents.

### Create a New Branch
You will create a new ‘branch’ to make and view your changes locally before adding them to the remote repository. Changes you make to your branch only exist on your computer.

1.	Open the JIRA ticket for the issue you are working on and copy the ticket number.
2.	Open your local *githubrepo* folder.
3.	Right-click the *codra-docs-develop* folder and choose ‘New Terminal at Folder’.
4.	Run the command `git fetch` in the terminal window. This command asks Git if there have been any updates to the remote server that need to be updated on your local machine.
5.	Run the command `git pull`. This command updates your local copy of the repository with any changes that have occurred since the last time you updated your local copy.
6.	Run the command `git checkout -b <paste your ticket number here> `. Example: `git checkout -b DOC-1903` This will create a new ‘branch’ in Git – a local copy of the repository that you can work on without affecting the master copy of the files held on the remote Git server. You will be automatically ‘switched’ to the new branch – any changes that you make will only be made on this branch for now.

### Make your Changes
Use markdown formatting – see the [Markdown Quickstart Guide] (https://engineering.r3.com/help/knowledge-base-style-and-markdown-guide/).

1.	Open your text editor and open your local copy of the corda-docs-develop folder.
2.	Navigate to the correct document. Use the URL from the https://docs.corda.net to find the file path (you will need to start with content > en > version).
3.	Make your changes and save. Remember to make the changes to all relevant versions of Corda OS and Corda Enterprise.

### View your Changes in Hugo
You should check your changes in Hugo – this will let you see if your markdown formatting has worked as expected.

1.	Go to your local copy of the *corda-docs* repo.
2.	Right-click the *codra-docs* folder and choose ‘New Terminal at Folder’.
3.	Run command `hugo serve`

Hugo will return a URL, which you can use to preview your changes.

### Commit and Push your Changes
If you are happy with the way your changes look on Hugo, send them to the remote repository to be reviewed. These documents have not yet been published, so you won’t be proposing changes to the ‘master’ branch in this case. Instead, you will request the changes be reviewed against a copy of the master branch set up to store the documents until they are ready to go live. The name of this branch changes quarterly – check to see what it is.

1.	Return to the command line.
2.	Run command `git branch` to confirm you are working on the correct branch (this is the number of the ticket you are working on).
3.	Commit your changes. This saves your changes to your local repository.
  a.	Run command git add .
  b.	Run command git commit -<name of master copy branch> “<DOC-1111: updated <files name(s)> <versions>” Fill in the comment between the quotation marks with the information relevant to your update. This will become the title of your pull request in GitHub.
4.	Push your changes. This sends your updates to GitHub (the remote repository). The easiest way to do this is a little hacky!
  a.	Run command git push
  b.	Git will return an error and instruct you to push a longer string: git push --set-upstream origin <branch name>. Push that.

### Raise a Pull Request
Your changes are now available on the remote repository. This allows other people to compare your proposed changes to the existing content and either approve them or suggest changes.
1.	Go to the corda-docs repo in [GitHub] (https://github.com/corda/corda-docs)
2.	Open and create the pull request (PR).
  a.	Add any comments, such as a summary of the changes you made.
  b.	Add labels: team technical writing, internal, and any other relevant labels (for example, ‘bug’ or ‘documentation’.
  c.	Add any reviewers. You may need to add developers that need to do a technical review and/or a specific member of the technical writing team. If you don’t select specific reviewers, GitHub defaults to the technical writing team.
  d.	Select Create Pull Request
3.	Copy the URL for the PR and navigate to your Jira ticket add the PR to the ticket as a comment. For example, “Created PR for corda-docs-develop repo: URL”
4.	Let the relevant people know about your pull request – many don’t receive GitHub notifications. Ping any involved developers and drop the PR in the Technical Writers team chat.

{{< note >}}
NB: You don’t need to add tags to unpublished documents.
{{< /note >}}

### Publish your Approved Content
Your PR must be approved by any relevant engineers and at least one member of the technical writing team. Until you have received the required approval, you will be blocked from merging your request with the master copy on GitHub.

When your PR is approved, you can publish your changes to the live docs site.

1.	Go to your PR in Github. You will now have the option to merge your changes to the copy of 'master' used to store unpublished content.
2.	Merge your changes in the GitHub UI. GitHub will automatically delete your branch from the remote repository, as your changes are now part of the master branch.
3.	Delete the local copy of the branch. You cannot delete the branch while you are in it – so you may have to switch branches to delete.
  a.	Open the command line from the corda-docs-develop directory.
  b.	Run command `git branch` to check which branch you are on. If you are on the branch you are attempting to delete, run command `git checkout -b master`
  c.	Run command `git branch -d <branch name>`
4.	Go to your Jira ticket and mark it ‘Done - Documented’. You may have to move it through the stage ‘In Review’ first.
